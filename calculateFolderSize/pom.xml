<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.migu</groupId>
    <artifactId>calculateFolderSize</artifactId>
    <version>1.0.0</version>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.16.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.11.1</version>
        </dependency>
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.4.2</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.2</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

     <build>
         <plugins>
             <plugin>
                 <!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-compiler-plugin</artifactId>
                 <version>3.8.0</version>
                 <configuration>
                     <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                     <source>1.8</source> <!-- 源代码使用的JDK版本 -->
                     <target>1.8</target> <!-- 需要生成的目标class文件的编译版本 -->
                     <encoding>UTF-8</encoding><!-- 字符集编码 -->
                     <skipTests>true</skipTests><!-- 跳过测试 -->
                     <verbose>true</verbose>
                     <showWarnings>true</showWarnings>
                     <fork>true</fork><!-- 要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 -->
                     <executable><!-- path-to-javac --></executable><!-- 使用指定的javac命令，例如：<executable>${JAVA_1_4_HOME}/bin/javac</executable> -->
                     <compilerVersion>1.3</compilerVersion><!-- 指定插件将使用的编译器的版本 -->
                     <meminitial>128m</meminitial><!-- 编译器使用的初始内存 -->
                     <maxmem>512m</maxmem><!-- 编译器使用的最大内存 -->
                     <!--<compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>&lt;!&ndash; 这个选项用来传递编译器自身不包含但是却支持的参数选项 &ndash;&gt;-->
                 </configuration>
             </plugin>

             <plugin>
                 <artifactId>maven-assembly-plugin</artifactId>
                 <version>3.1.0</version>
                 <configuration>
                     <finalName>${project.name}</finalName>
                     <descriptors>
                         <descriptor>src/main/assembly/jar-assembly.xml</descriptor>
                     </descriptors>

                     <!--<descriptorRefs>-->
                        <!--<descriptorRef>jar-with-dependencies</descriptorRef>-->
                     <!--</descriptorRefs>-->

                     <!--修复 打包 没有主清单属性的时候-->
                     <archive>
                         <manifest>
                             <mainClass>com.migu.FileSize</mainClass>
                         </manifest>
                     </archive>

                 </configuration>
                 <executions>
                     <execution>
                         <id>make-assembly</id>
                         <phase>package</phase>
                         <goals>
                             <goal>single</goal>
                         </goals>
                     </execution>
                 </executions>
             </plugin>

             <!--<plugin>-->
                 <!--<groupId>org.apache.maven.plugins</groupId>-->
                 <!--<artifactId>maven-dependency-plugin</artifactId>-->
                 <!--<version>3.1.1</version>-->
                 <!--<executions>-->
                     <!--<execution>-->
                         <!--<id>copy-dependencies</id>-->
                         <!--<phase>package</phase>-->
                         <!--<goals>-->
                             <!--<goal>copy-dependencies</goal>-->
                         <!--</goals>-->
                         <!--<configuration>-->
                             <!--<outputDirectory>${project.build.directory}/lib</outputDirectory>-->
                         <!--</configuration>-->
                     <!--</execution>-->
                 <!--</executions>-->
             <!--</plugin>-->

             <!--<plugin>-->
             <!--<groupId>org.apache.maven.plugins</groupId>-->
             <!--<artifactId>maven-jar-plugin</artifactId>-->
             <!--<version>3.1.0</version>-->
             <!--<configuration>-->
                 <!--<archive>-->
                     <!--<manifest>-->
                         <!--<addClasspath>true</addClasspath>-->
                         <!--<classpathPrefix>/data/lib</classpathPrefix>-->
                         <!--<mainClass>com.migu.FileSize</mainClass>-->
                     <!--</manifest>-->
                 <!--</archive>-->
                 <!--</configuration>-->
             <!--</plugin>-->


         </plugins>
     </build>
</project>